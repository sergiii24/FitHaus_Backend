openapi: "3.0.1"
info:
  description: "Servidor de l'aplicació FitHaus de l'assignatura PES. Aquí podràs trobar operacions per gestionar usuaris del sistema."
  version: "1.0.0"
  title: "SERVIDOR FITHAUS"
  contact:
    email: "fithaus2021@gmail.com"
servers:
  - url: "127.0.0.1:8000"
paths:
  /users:
    post:
      tags:
      - "user"
      summary: Crear usuari, es produeix quan aquest es registra per primer cop
      operationId: createUser
      requestBody:
        description: Provide at least all required fields. The rest of information can be especified by user or it will be automatically computed
        content:
          application/json:
            schema:
              required: [username, firstName, lastName, email, password, birthdate, weight, height]
              type: object
              properties:
                username:
                  type: "string"
                  maxLength: 200
                  example: "My username"
                  uniqueItems: true
                firstName:
                  type: "string"
                  maxLength: 200
                  example: "My firstName"
                lastName:
                  type: "string"
                  maxLength: 200
                  example: "my lastName"
                email:
                  type: "string"
                  maxLength: 200
                  format: "email"
                  example: "mymail@mail.com"
                  uniqueItems: true
                password:
                  type: "string"
                  maxLength: 200
                  format: "password"
                  example: "Mypassword_1_#"
                gender:
                  type: "string"
                  enum: [ M, W, X ]
                  example: "X"
                birthdate:
                  type: "string"
                  format: "date"
                  example: "2021-05-12"
                activitiesdone:
                  type: "integer"
                  default: 0
                achievements:
                  type: "string"
                  maxLength: 200
                  example: "my achievements"
                points:
                  type: "integer"
                  default: 0
                level:
                  type: "integer"
                  default: 0
                objective:
                  type: "object"
                interestcategories:
                  type: "object"
                weight:
                  type: "number"
                  default: 0.0
                height:
                  type: "number"
                  default: 0.0
                imc:
                  type: "number"
                  default: 0
                igc:
                  type: "number"
                  default: 0
      responses:
        "200":
          description: "Operació exitosa"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "400":
          description: "Usuari ja existeix"
    get:
      tags:
      - "user"
      summary: "Retrieves all the users"
      operationId: "getAllUsers"
      responses:
        "200":
          description: "Succesful operation"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /user/{id}:
      get:
        tags:
          - "user"
        summary: "Obtenir informació de l'usuari"
        description: "Provide user id"
        operationId: "getUserById"
        parameters:
          - name: "id"
            in: "path"
            description: "Id de l'usuari"
            required: true
            schema:
              type: "string"
        responses:
          "200":
            description: "Operació exitosa"
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/User'
          "400":
            description: "Alguna cosa no ha anat bé..."
      patch:
        tags:
          - "user"
        summary: "Actualitzar info d'un usuari"
        description: "Especificar només els camps a actualitzar, sense importar els altres"
        operationId: "updateUser"
        requestBody:
          description: Provide all fields
          content:
            application/json:
              schema:
                type: object
                properties:
                  username:
                    type: "string"
                    maxLength: 200
                  firstName:
                    type: "string"
                    maxLength: 200
                  lastName:
                    type: "string"
                    maxLength: 200
                  email:
                    type: "string"
                    maxLength: 200
                    format: "email"
                  password:
                    type: "string"
                    maxLength: 200
                    format: "password"
                  gender:
                    type: "string"
                    enum: [ M, W, X ]
                  birthdate:
                    type: "string"
                    maxLength: 200
                    format: "date"
                  activitiesdone:
                    type: "integer"
                    default: 0
                  achievements:
                    type: "string"
                    maxLength: 200
                  points:
                    type: "integer"
                    default: 0
                  level:
                    type: "integer"
                    default: 0
                  objective:
                    type: "string"
                    maxLength: 200
                  interestcategories:
                    type: "string"
                    maxLength: 200
                  weight:
                    type: "integer"
                    default: 0
                  height:
                    type: "integer"
                    default: 0
                  imc:
                    type: "integer"
                    default: 0
                  igc:
                    type: "integer"
                    default: 0
        responses:
          "200":
            description: "Operació exitosa"
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/User'
          "400":
            description: "Usuari no trobat"
      delete:
        tags:
          - "user"
        summary: "Eliminar usuari"
        description: "Provide user id"
        operationId: "deleteUser"
        parameters:
          - name: "id"
            in: "path"
            description: "Id de l'usuari a eliminar"
            required: true
            schema:
              type: "string"
        responses:
          "200":
            description: "Operació exitosa"
          "404":
            description: "User not found"
  /users/login:
    get:
      tags:
        - "user"
      summary: "Loggejar usuari"
      operationId: "loginUser"
      requestBody:
        description: Provide email and password in order to log in
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  description: "Email de l'usuari"
                  required: true
                  type: "string"
                password:
                  description: "Contrasenya de l'usuari"
                  required: true
                  type: "string"
      responses:
        "200":
          description: "Operació exitosa"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "400":
          description: "Credencials incorrectes"
  /users/stats:
    get:
      tags:
      - "user"
      summary: Crear usuari, es produeix quan aquest es registra per primer cop
      operationId: getUserStats
      requestBody:
        description: Provide user's id to get his/her stats
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: "integer"
                  description: Id de l'usuari
                  required: true
      responses:
        "200":
          description: "Operació exitosa"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserStats'
        "400":
          description: "Credencials incorrectes"

  /ranking:
    get:
      tags:
        - "user"
      summary: "Ranking usuaris"
      description: "Consultar el ranking dels usuaris"
      operationId: "UserRanking"
      responses:
        "200":
          description: "Operació exitosa"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserRanking'
        "400":
          description: "Credencials incorrectes"

  /categories:
    post:
      tags:
        - "category"
      summary: "Crear categoria"
      description: "Crear una categoria a la BD"
      operationId: "createCategory"
      requestBody:
        description: Provide the field
        content:
          application/json:
            schema:
              type: object
              properties:
                category:
                  type: "string"
                  enum: [ S,C,Y,E,R,P ]
      responses:
        "200":
          description: "Operació exitosa"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        "400":
          description: "Categoria ja existeix"
  /categories/{id}:
    get:
      tags:
        - "category"
      summary: "Obtenir informació de la categoria"
      description: "Provide the category id"
      operationId: "getCatById"
      parameters:
        - name: "id"
          in: "path"
          description: "Id de la categoria"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "Operació exitosa"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        "400":
          description: "Alguna cosa no ha anat bé..."

  /classes:
    post:
      tags:
        - "class"
      summary: "Crear classe"
      description: "Crear una classe a la BD"
      operationId: "createClass"
      requestBody:
        description: Provide all required fields
        content:
          application/json:
            schema:
              required: [type, name, description, age, difficulty, length, categories, pre, videoclass, trainer, workarea]
              type: object
              properties:
                type:
                  type: "string"
                  enum: [E,C]
                name:
                  type: "string"
                  maxLength: 30
                description:
                  type: "string"
                  maxLength: 200
                age:
                  type: "string"
                  enum: [K,T,A,E]
                difficulty:
                  type: "string"
                  enum: [E,M,H]
                length:
                  type: "integer"
                categories:
                  type: "object"
                  format: Category
                pre:
                  type: "string"
                  format: "binary"
                videoclass:
                  type: "string"
                  format: "binary"
                trainer:
                  type: "string"
                workarea:
                  type: "string"
                  enum: [UB,LB,FB,C]
      responses:
        "200":
          description: "Operació exitosa"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Class'
        "400":
          description: "Classe ja existeix"
  /classes/{id}:
    get:
      tags:
        - "class"
      summary: "Obtenir informació de la classe"
      description: "Provide the class id"
      operationId: "getClassById"
      parameters:
        - name: "id"
          in: "path"
          description: "Id de la classe"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "Operació exitosa"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Class'
        "400":
          description: "Alguna cosa no ha anat bé..."

  /exercises:
    post:
      tags:
        - "exercise"
      summary: "Crear exercici"
      description: "Crear un exercici a la BD"
      operationId: "createExercise"
      requestBody:
        description: Provide all required fields
        content:
          application/json:
            schema:
              required: [type, name, description, age, difficulty, length, categories, pre, muscleimage, videotutorial, videoexercise, muscle]
              type: object
              properties:
                type:
                  type: "string"
                  enum: [ E,C ]
                name:
                  type: "string"
                  maxLength: 30
                description:
                  type: "string"
                  maxLength: 200
                age:
                  type: "string"
                  enum: [ K,T,A,E ]
                difficulty:
                  type: "string"
                  enum: [ E,M,H ]
                length:
                  type: "integer"
                categories:
                  type: "object"
                  format: Category
                pre:
                  type: "string"
                  format: "binary"
                muscleimage:
                  type: "string"
                  format: "binary"
                videotutorial:
                  type: "string"
                  format: "binary"
                videoexercise:
                  type: "string"
                  format: "binary"
                muscle:
                  type: "string"
                  enum: [ Bi,Tr,Fa,Ch,Sh,Do,Gl,Fe,Qu,Cm,Co]
      responses:
        "200":
          description: "Operació exitosa"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exercise'
        "400":
          description: "Exercici ja existeix"
  /exercises/{id}:
    get:
      tags:
        - "exercise"
      summary: "Obtenir informació de l'exercici"
      description: "Provide the exercise id"
      operationId: "getExerById"
      parameters:
        - name: "id"
          in: "path"
          description: "Id de l'exercici"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "Operació exitosa"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exercise'
        "400":
          description: "Alguna cosa no ha anat bé..."

  /objectives:
    post:
      tags:
        - "objective"
      summary: "Crear objectiu"
      description: "Crear un objectiu a la BD"
      operationId: "createObjective"
      requestBody:
        description: Provide the field
        content:
          application/json:
            schema:
              type: object
              properties:
                objective:
                  type: "string"
                  enum: [ S,Fr,P,Fl,Rs,Rc,A ]
      responses:
        "200":
          description: "Operació exitosa"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Objective'
        "400":
          description: "Objectiu ja existeix"
  /objectives/{id}:
    get:
      tags:
        - "objective"
      summary: "Obtenir informació de l'objectiu"
      description: "Provide the objective id"
      operationId: "getObjById"
      parameters:
        - name: "id"
          in: "path"
          description: "Id de l'objectiu"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "Operació exitosa"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Objective'
        "400":
          description: "Alguna cosa no ha anat bé..."

  /customroutines:
    post:
      tags:
        - "custom routine"
      summary: "Crear rutina personalitzada"
      description: "Crear un rutina personalitzada a la BD, hereta del model routines"
      operationId: "createCustomRoutine"
      requestBody:
        description: Provide all required fields
        content:
          application/json:
            schema:
              required: [name, description, time, categories, exercises, classes, public, user]
              type: object
              properties:
                name:
                  type: "string"
                  maxLength: 100
                  uniqueItems: true
                description:
                  type: "string"
                time:
                  type: "string"
                  enum: [P,R,F]
                categories:
                  type: "object"
                exercises:
                  type: "object"
                classes:
                  type: "object"
                public:
                  type: "boolean"
                user:
                  type: "object"
      responses:
        "200":
          description: "Operació exitosa"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomRoutine'
        "400":
          description: "Rutina personalitzada ja existeix"
  /customroutines/{id}:
    get:
      tags:
        - "custom routine"
      summary: "Obtenir informació de la rutina personalitzada"
      description: "Provide the Routine id"
      operationId: "getCustomRoutineById"
      parameters:
        - name: "id"
          in: "path"
          description: "Id de la rutina personalitzada"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "Operació exitosa"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomRoutine'
        "400":
          description: "Alguna cosa no ha anat bé..."

  /predefinedroutines:
    post:
      tags:
        - "predefined routine"
      summary: "Crear rutina predefinida"
      description: "Crear un rutina predefinida a la BD, hereta del model routines"
      operationId: "createCustomRoutine"
      requestBody:
        description: Provide all required fields
        content:
          application/json:
            schema:
              required: [name, description, time, categories, exercises, classes, age, level, equipment, objective, impact, image, users]
              type: object
              properties:
                name:
                  type: "string"
                  maxLength: 100
                  uniqueItems: true
                description:
                  type: "string"
                time:
                  type: "string"
                  enum: [ P,R,F ]
                categories:
                  type: "object"
                exercises:
                  type: "object"
                classes:
                  type: "object"
                age:
                  type: "string"
                  enum: [ K,T,A,E ]
                level:
                  type: "string"
                  enum: [ P,I,A ]
                equipment:
                  type: "string"
                  enum: [ W,HM,K,D,B,RB,RL,FR ]
                objective:
                  type: "object"
                impact:
                  type: "string"
                  enum: [ L,M,H ]
                image:
                  type: "string"
                  format: "binary"
                users:
                  type: "object"
      responses:
        "200":
          description: "Operació exitosa"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PredefinedRoutine'
        "400":
          description: "Rutina predefinida ja existeix"
  /predefinedroutines/{id}:
    get:
      tags:
        - "predefined routine"
      summary: "Obtenir informació de la rutina predefinida"
      description: "Provide the routine id"
      operationId: "getPredefinedRoutineById"
      parameters:
        - name: "id"
          in: "path"
          description: "Id de la rutina predefinida"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "Operació exitosa"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PredefinedRoutine'
        "400":
          description: "Alguna cosa no ha anat bé..."

  /trainings:
    post:
      tags:
        - "training"
      summary: "Crear entrenament"
      description: "Crear un entrenament a la BD, associat a un usuari"
      operationId: "createTraining"
      requestBody:
        description: Provide all required fields
        content:
          application/json:
            schema:
              required: [user, customroutine, predefinedroutine, date, hInici, hFi, done, shared]
              type: object
              properties:
                user:
                  type: "object"
                customroutine:
                  type: "object"
                predefinedroutine:
                  type: "object"
                date:
                  type: "string"
                  format: "date"
                hInici:
                  type: "string"
                  format: "hour"
                hFi:
                  type: "string"
                  format: "hour"
                done:
                  type: "boolean"
                shared:
                  type: "boolean"
      responses:
        "200":
          description: "Operació exitosa"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Training'
        "400":
          description: "Rutina predefinida ja existeix"
    get:
      tags:
        - "training"
      summary: "Obtenir entrenament d'un usuari"
      operationId: "getTrainingByUser"
      parameters:
        - name: "username"
          in: "path"
          description: "Nom de l'usuari"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "Operació exitosa"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Training'
        "400":
          description: "Alguna cosa no ha anat bé..."
  /trainings/{id}:
    get:
      tags:
        - "training"
      summary: "Obtenir informació de l'entrenament"
      description: "Provide the training id"
      operationId: "getTrainingById"
      parameters:
        - name: "id"
          in: "path"
          description: "Id de l'entrenament"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "Operació exitosa"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Training'
        "400":
          description: "Alguna cosa no ha anat bé..."

  /programs:
    post:
      tags:
        - "program"
      summary: "Crear programa"
      description: "Crear un programa a la BD"
      operationId: "createProgram"
      requestBody:
        description: Provide all required fields
        content:
          application/json:
            schema:
              required: [ name, description, level, weeks, predefinedroutine]
              type: object
              properties:
                name:
                  type: "string"
                description:
                  type: "string"
                level:
                  type: "string"
                  enum: [ B,I,A ]
                weeks:
                  type: "integer"
                predefinedroutine:
                  type: "object"
      responses:
        "200":
          description: "Operació exitosa"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Program'
        "400":
          description: "Programa ja existeix"
    get:
      tags:
        - "program"
      summary: "Obtenir tots els programes"
      operationId: "getPrograms"
      responses:
        "200":
          description: "Operació exitosa"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Program'
        "400":
          description: "Alguna cosa no ha anat bé..."
  /programs/{id}:
    get:
      tags:
        - "program"
      summary: "Obtenir informació del programa"
      description: "Provide the program id"
      operationId: "getProgramById"
      parameters:
        - name: "id"
          in: "path"
          description: "Id del programa"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "Operació exitosa"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Program'
        "400":
          description: "Alguna cosa no ha anat bé..."

  /collection:
    post:
      tags:
        - "collection"
      summary: "Crear col·lecció"
      description: "Crear un col·lecció a la BD"
      operationId: "createCollection"
      requestBody:
        description: Provide all required fields
        content:
          application/json:
            schema:
              required: [ name, description, predefinedroutine]
              type: object
              properties:
                name:
                  type: "string"
                description:
                  type: "string"
                predefinedroutine:
                  type: "object"
      responses:
        "200":
          description: "Operació exitosa"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Collection'
        "400":
          description: "Col·lecció ja existeix"
    get:
      tags:
        - "collection"
      summary: "Obtenir totes les col·leccions"
      operationId: "getCollections"
      responses:
        "200":
          description: "Operació exitosa"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Collection'
        "400":
          description: "Alguna cosa no ha anat bé..."
  /collection/{id}:
      get:
        tags:
          - "collection"
        summary: "Obtenir informació de la col·lecció"
        description: "Provide the collection id"
        operationId: "getCollectionById"
        parameters:
          - name: "id"
            in: "path"
            description: "Id de la col·lecció"
            required: true
            schema:
              type: "string"
        responses:
          "200":
            description: "Operació exitosa"
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Collection'
          "400":
            description: "Alguna cosa no ha anat bé..."


components:
  schemas:
    User:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
        username:
          type: "string"
          maxLength: 200
        firstName:
          type: "string"
          maxLength: 200
        lastName:
          type: "string"
          maxLength: 200
        email:
          type: "string"
          maxLength: 200
          format: "email"
        password:
          type: "string"
          maxLength: 200
          format: "password"
        gender:
          type: "string"
          enum: [M, W, X]
        birthdate:
          type: "string"
          maxLength: 200
          format: "date"
        activitiesdone:
          type: "integer"
          default: 0
        achievements:
          type: "string"
          maxLength: 200
        points:
          type: "integer"
          default: 0
        level:
          type: "string"
          enum: [B, I, A]
        objective:
          type: "object"
        interestcategories:
          type: "object"
        weight:
          type: "number"
          default: 0.0
        height:
          type: "number"
          default: 0.0
        imc:
          type: "number"
          default: 0.0
        igc:
          type: "number"
          default: 0.0

    UserRanking:
      type: "object"
      properties:
        username:
          type: "string"
          maxLength: 200
        email:
          type: "string"
          maxLength: 200
          format: "email"
        points:
          type: "integer"
          default: 0

    UserStats:
      type: "object"
      properties:
        username:
          type: "string"
          maxLength: 200
        email:
          type: "string"
          maxLength: 200
          format: "email"
        activitiesdone:
          type: "integer"
          default: 0
        achievements:
          type: "string"
          maxLength: 200
        points:
          type: "integer"
          default: 0
        level:
          type: "integer"
          default: 0

    Activity:
      type: "object"
      properties:
        type:
          type: "string"
          maxLength: 30
          enum: [E,C]
        name:
          type: "string"
          maxLength: 30
        description:
          type: "string"
          maxLength: 200
        age:
          type: "string"
          maxLength: 30
          enum: [K,T,A,E]
        difficulty:
          type: "string"
          maxLength: 30
          enum: [E,M,H]
        length:
          type: "integer"
        categories:
          type: "object"
        pre:
          type: "string"
          format: "binary"

    Category:
      type: "object"
      properties:
        category:
          type: "string"
          enum: [ S,C,Y,E,R,P ]

    Class:
      type: "object"
      properties:
        type:
          type: "string"
          enum: [ E,C ]
        name:
          type: "string"
          maxLength: 30
        description:
          type: "string"
          maxLength: 200
        age:
          type: "string"
          enum: [ K,T,A,E ]
        difficulty:
          type: "string"
          enum: [ E,M,H ]
        length:
          type: "integer"
        categories:
          type: "object"
          format: Category
        pre:
          type: "string"
          format: "binary"
        videoclass:
          type: "string"
          format: "binary"
        trainer:
          type: "string"
        workarea:
          type: "string"
          enum: [ UB,LB,FB,C ]

    Exercise:
      type: "object"
      properties:
        type:
          type: "string"
          enum: [ E,C ]
        name:
          type: "string"
          maxLength: 30
        description:
          type: "string"
          maxLength: 200
        age:
          type: "string"
          enum: [ K,T,A,E ]
        difficulty:
          type: "string"
          enum: [ E,M,H ]
        length:
          type: "integer"
        categories:
          type: "object"
          format: Category
        pre:
          type: "string"
          format: "binary"
        muscleimage:
          type: "string"
          format: "binary"
        videotutorial:
          type: "string"
          format: "binary"
        videoexercise:
          type: "string"
          format: "binary"
        muscle:
          type: "string"
          enum: [ Bi,Tr,Fa,Ch,Sh,Do,Gl,Fe,Qu,Cm,Co ]

    Objective:
      type: "object"
      properties:
        objective:
          type: "string"
          enum: [ S,Fr,P,Fl,Rs,Rc,A ]

    Routine:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
        name:
          type: "string"
        description:
          type: "string"
        time:
          type: "string"
          enum: [ P,R,F ]
        categories:
          type: "object"
        exercices:
          type: "object"
        classes:
          type: "object"

    CustomRoutine:
      type: "object"
      properties:
        name:
          type: "string"
          maxLength: 100
          uniqueItems: true
        description:
          type: "string"
        time:
          type: "string"
          enum: [ P,R,F ]
        categories:
          type: "object"
        exercises:
          type: "object"
        classes:
          type: "object"
        public:
          type: "boolean"
        user:
          type: "object"

    PredefinedRoutine:
      type: "object"
      properties:
        name:
          type: "string"
          maxLength: 100
          uniqueItems: true
        description:
          type: "string"
        time:
          type: "string"
          enum: [ P,R,F ]
        categories:
          type: "object"
        exercises:
          type: "object"
        classes:
          type: "object"
        age:
          type: "string"
          enum: [ K,T,A,E ]
        level:
          type: "string"
          enum: [ P,I,A ]
        equipment:
          type: "string"
          enum: [ W,HM,K,D,B,RB,RL,FR ]
        objective:
          type: "object"
        impact:
          type: "string"
          enum: [ L,M,H ]
        image:
          type: "string"
          format: "binary"
        users:
          type: "object"

    Training:
      type: "object"
      properties:
        user:
          type: "object"
        customroutine:
          type: "object"
        predefinedroutine:
          type: "object"
        date:
          type: "string"
          format: "date"
        hInici:
          type: "string"
          format: "hour"
        hFi:
          type: "string"
          format: "hour"
        done:
          type: "boolean"
        shared:
          type: "boolean"

    Program:
      type: "object"
      properties:
        name:
          type: "string"
        description:
          type: "string"
        level:
          type: "string"
          enum: [ B,I,A ]
        weeks:
          type: "integer"
        predefinedroutine:
          type: "object"

    Collection:
      type: "object"
      properties:
        name:
          type: "string"
        description:
          type: "string"
        predefinedroutine:
          type: "object"
